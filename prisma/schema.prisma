datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [pg_uuidv7]
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

model Account {
    id String @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid

    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    userId String @db.Uuid
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid

    sessionToken String   @unique
    expires      DateTime

    userId String @db.Uuid
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id String @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid

    name          String    @db.VarChar(32)
    email         String    @unique
    emailVerified DateTime?
    image         String?

    accounts Account[]
    sessions Session[]

    friends    User[] @relation("Friend")
    outFriends User[] @relation("Friend")

    friendRequests    User[] @relation("FriendRequest")
    outFriendRequests User[] @relation("FriendRequest")

    wishes         Wish[] @relation("wishes")
    reservedWishes Wish[] @relation("reservedWishes")

    viewedWishes Wish[] @relation("WishView")

    comments Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Wish {
    id String @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid

    title       String @db.VarChar(32)
    description String @db.VarChar(512)
    link        String @db.VarChar(512)

    userId String @db.Uuid
    user   User   @relation("wishes", fields: [userId], references: [id], onDelete: Cascade)

    viewedBy User[] @relation("WishView")

    reservedById String? @db.Uuid
    reservedBy   User?   @relation("reservedWishes", fields: [reservedById], references: [id], onDelete: SetNull)

    comments Comment[]
}

model Comment {
    id String @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid

    text      String   @db.VarChar(256)
    timestamp DateTime @default(now())

    userId String @db.Uuid
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    wishId String @db.Uuid
    wish   Wish   @relation(fields: [wishId], references: [id], onDelete: Cascade)
}
