datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

model Account {
  id                String  @id @default(cuid()) @db.Char(25)
  type              String  @db.VarChar(5)
  provider          String  @db.VarChar(7)
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.VarChar(6)
  scope             String? @db.VarChar(14)
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Char(25)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid()) @db.Char(25)
  sessionToken String   @unique @db.Char(36)
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Char(25)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid()) @db.Char(25)
  name          String?   @db.VarChar(32)
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  wishList       Wish[]    @relation("WishList")
  reservedWishes Wish[]    @relation("ReservedWishes")
  comments       Comment[]

  friends           User[] @relation("Friend")
  outFriends        User[] @relation("Friend")
  friendRequests    User[] @relation("FriendRequest")
  outFriendRequests User[] @relation("FriendRequest")
}

model VerificationToken {
  identifier String
  token      String   @unique @db.Char(64)
  expires    DateTime

  @@unique([identifier, token])
}

model Wish {
  id          String @id @default(cuid()) @db.Char(25)
  title       String @db.VarChar(32)
  description String @db.Text
  link        String

  user   User   @relation("WishList", fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Char(25)

  reservedBy   User?   @relation("ReservedWishes", fields: [reservedById], references: [id], onDelete: SetNull)
  reservedById String? @db.Char(25)

  comments Comment[]

  @@index([userId])
  @@index([reservedById])
}

model Comment {
  id   String   @id @default(cuid()) @db.Char(25)
  text String   @db.Text
  date DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Char(25)
  Wish   Wish   @relation(fields: [wishId], references: [id], onDelete: Cascade)
  wishId String @db.Char(25)

  @@index([userId])
  @@index([wishId])
}
